//===- FIModelRunner.h - AI-Enabled Continuous Program Optimization -------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//

#if defined(ENABLE_ACPO)
#ifdef LLVM_HAVE_TF_AOT_FICOMPILEDMODEL

#ifndef LLVM_ANALYSIS_FIMODELRUNNER_H
#define LLVM_ANALYSIS_FIMODELRUNNER_H

#include "llvm/Analysis/AOTModelRunner.h"
#include "llvm/Analysis/FICompiledModel.h"

namespace llvm {

class FIModelRunner : public AOTModelRunner<FICompiledModel> {
  std::vector<float> Means = {
      0.40009943697174110699421589742996729910373687744141,
      0.0,
      47.2218788212687599070704891346395015716552734375,
      0.0,
      0.07675459224122871404460966004990041255950927734375,
      5816.8243862454482950852252542972564697265625,
      1333.68016232413765465025790035724639892578125,
      321.9700210967629345759632997214794158935546875,
      0.94076781467098458122677584469784051179885864257812,
      0.0,
      0.0,
      24.57427538666200916850357316434383392333984375,
      0.72785175828753412297089653293369337916374206542969,
      22.362582136282401990001744707114994525909423828125,
      2.3236404681600126842511144786840304732322692871094,
      219.476437468925951179699040949344635009765625,
      123.872156304169635632206336595118045806884765625,
      759.6211988873809559663641266524791717529296875,
      3.5118047810371009198604497214546427130699157714844,
      0.0,
      14.689125089022963877027905255090445280075073242188,
      0.2720138674263292699606608948670327663421630859375,
      97.33707789677367827607668004930019378662109375,
      5.4576519437240493815011177503038197755813598632812,
      222416123463299168.0,
      697004967939498496.0,
      6.2712796684314486839184610289521515369415283203125,
      1.4856427516360068974421437815180979669094085693359,
      0.0041427067953076499376430241738944459939375519752502,
      0.72785175828753412297089653293369337916374206542969,
      552.7808652140716958456323482096195220947265625,
      62.5524652090595196796130039729177951812744140625,
      385.68509386043888298445381224155426025390625,
      92.9494483935554143272383953444659709930419921875,
      24.2728066757145342080548289231956005096435546875,
      0.90531987798814816947867711860453709959983825683594,
      0.0,
      0.0,
      2.9322753597871509256833633116912096738815307617188,
      0.49584111584407208894731411419343203306198120117188,
      7.9963853317029256473347231803927570581436157226562,
      1.4571144465795025091381376114441081881523132324219,
      15.557169540036818844441768305841833353042602539062,
      9.6481678066085265754736610688269138336181640625,
      50.98738225453177363988288561813533306121826171875,
      1.3425469302194332765765238946187309920787811279297,
      0.0,
      839.271140434566405019722878932952880859375,
      0.16440693908813608370422798543586395680904388427734,
      2.8829196844891762374629706755513325333595275878906,
      132.0555906421747067724936641752719879150390625,
      92791372484119440.0,
      166968642875823456.0,
      5.5557876796248262252220229129306972026824951171875,
      1.1750766644405326033506753446999937295913696289062,
      0.0042161570432282073628282859090177225880324840545654,
      0.49584111584407208894731411419343203306198120117188,
      41.15953665944181949498670292086899280548095703125,
      5.14903426051142787400749512016773223876953125,
      2.0527687821658449074391228350577875971794128417969,
      0.52614251736787642776960183255141600966453552246094,
      0.74523979091361081117383946548216044902801513671875,
      222.345100041656024814074044115841388702392578125,
      7.4997648449992606600744693423621356487274169921875,
      0.0,
      78.5584998454695693226312869228422641754150390625,
      0.0,
      10.409640011287439875786731136031448841094970703125,
      8.4653112780338357623577394406311213970184326171875,
      1.3630927585697201198655648113344796001911163330078,
      566.7381985783200661899172700941562652587890625,
      0.0,
      1.2066945269353257508271326514659449458122253417969,
      55.41075531786237462483768467791378498077392578125,
      0.51243634018194272883306439325679093599319458007812,
      1.1147556403606606600931172579294070601463317871094,
      -31.471868743197301654390685143880546092987060546875,
      0.0,
      0.030368588666872708276001091576290491502732038497925,
      0.58478345583789081985059965518303215503692626953125,
      0.00034937314395517275094141251834400918596656993031502,
      -0.23764092503258577027125397762574721127748489379883,
      -62.20223330063559075142620713450014591217041015625,
      5.8952014942420616350204909394960850477218627929688,
      3339.09353794057960840291343629360198974609375,
      0.71960117711874660439974604742019437253475189208984,
      -49.2720273048549444183663581497967243194580078125,
      27818.32155766672440222464501857757568359375,
      91.64824843118020680776680819690227508544921875,
      106.3296335613216996307528461329638957977294921875,
      469.83727273948858282892615534365177154541015625,
      0.30689743210739195422576131022651679813861846923828,
      1071.964175815315911677316762506961822509765625,
      1363.988766309679022015188820660114288330078125,
      14.079536139964256236112305487040430307388305664062,
      63165365211952664.0,
      0.38502264206721403816402471420587971806526184082031,
      0.015573979763232508391479491649533883901312947273254,
      0.13859363872129429329227434664062457159161567687988,
      0.0};

  std::vector<float> Scales = {
      0.48991823553184549178141082848014775663614273071289,
      1.0,
      19.2517211876445770712962257675826549530029296875,
      1.0,
      0.26620166192402217042456413764739409089088439941406,
      13580.447773648038491955958306789398193359375,
      3192.7079136089387247920967638492584228515625,
      633.0586155859824657454737462103366851806640625,
      0.23605875020885080939336830851971171796321868896484,
      1.0,
      1.0,
      101.565906032925312274528550915420055389404296875,
      0.44506581113952026207414292002795264124870300292969,
      25.4451961539476627649492002092301845550537109375,
      1.8819488669919737233726664271671324968338012695312,
      399.4446922340151786556816659867763519287109375,
      253.61174866766344848656444810330867767333984375,
      1934.51814232197148157865740358829498291015625,
      9.2671206485376131922748754732310771942138671875,
      1.0,
      101.7363052307218964642743230797350406646728515625,
      0.44499699252253444026194983962341211736202239990234,
      241.819662633324895750774885527789592742919921875,
      41.0624051346520815286567085422575473785400390625,
      1810657384453411584.0,
      2590019375355715584.0,
      18.6007475145233769353581010363996028900146484375,
      0.30589376767499054654564361044322140514850616455078,
      0.021661308027730186848147653222440567333251237869263,
      0.44506581113952026207414292002795264124870300292969,
      2210.9835111177717408281750977039337158203125,
      252.28469071093292086516157723963260650634765625,
      1479.28580699818076027440838515758514404296875,
      358.2883493183543350824038498103618621826171875,
      86.4399992258764626740230596624314785003662109375,
      0.29277260204409949473358665272826328873634338378906,
      1.0,
      1.0,
      11.300678128510535103146139590535312891006469726562,
      0.49998270338340455865022704529110342264175415039062,
      9.4889928089799600030573856201954185962677001953125,
      1.0885854822898506366612991769216023385524749755859,
      53.20529981175358358314042561687529087066650390625,
      36.65171139901388386306280153803527355194091796875,
      214.68561782216193023486994206905364990234375,
      2.8728217196022858281878598063485696911811828613281,
      1.0,
      1653.1016242378727838513441383838653564453125,
      0.37064443536603375317639574859640561044216156005859,
      20.0905336391907667348277755081653594970703125,
      288.66579115116110187955200672149658203125,
      967784087203564544.0,
      986920622098821248.0,
      17.499765511468584833210115903057157993316650390625,
      0.57797196338014200645005757905892096459865570068359,
      0.028955889395889600895772630906321865040808916091919,
      0.49998270338340455865022704529110342264175415039062,
      319.19585661999855119574931450188159942626953125,
      38.6813101625874224964718450792133808135986328125,
      39.62777871280881214488545083440840244293212890625,
      5.0871202966110988796799574629403650760650634765625,
      0.69504605038799238680979897253564558923244476318359,
      673.3477042973012203219695948064327239990234375,
      56.94168682747444876213194220326840877532958984375,
      1.0,
      261.01902251155337353338836692273616790771484375,
      1.0,
      85.0611943221388884239786420948803424835205078125,
      53.12927927294536090130350203253328800201416015625,
      21.829518414441992035790462978184223175048828125,
      1898.72146183866834689979441463947296142578125,
      1.0,
      9.7285926829767870316345579340122640132904052734375,
      174.40267892003106453557847999036312103271484375,
      0.98364895900708060327843895720434375107288360595703,
      1.1152676652901183373955973365809768438339233398438,
      18.12268289087599981712628505192697048187255859375,
      1.0,
      0.1715993516574435828747624555035145021975040435791,
      0.49275933843630442821037718204024713486433029174805,
      0.031531692879025040310292382628176710568368434906006,
      23.13033056510358420609918539412319660186767578125,
      210.58233961820729973624111153185367584228515625,
      5.1604155410259560099461850768420845270156860351562,
      2053.87275307550726211047731339931488037109375,
      1.0834136602451556186110792623367160558700561523438,
      3840.080091990574146620929241180419921875,
      13192.047960544839952490292489528656005859375,
      348.088713237990532434196211397647857666015625,
      439.96013885313283253708505071699619293212890625,
      897.3433304220051240918110124766826629638671875,
      0.69288480487588777201324319321429356932640075683594,
      2894.596744865002619917504489421844482421875,
      3788.94162413956064483500085771083831787109375,
      94.549943427633166947998688556253910064697265625,
      649339661894085888.0,
      0.48660066498392295919472871901234611868858337402344,
      0.12382015553845396316212656984134810045361518859863,
      0.50791641118256847242662388453027233481407165527344,
      1.0};

public:
  FIModelRunner(LLVMContext &Ctx,
                std::vector<std::pair<std::string, std::string>> Features,
                StringRef DecisionName)
      : AOTModelRunner<FICompiledModel>(
            Ctx,
            {{"input_1", "float32[" + std::to_string(Features.size()) + "]"}},
            DecisionName) {}

  // Features for this model are only floats so we only need to override the
  // float method to handle feature scaling and the input type
  bool setCustomFeature(int FeatureIndex, float FeatureValue) override {
    // Scale the feature according to the constant mean and scale value
    // Feature scaling is done to create a standard normal distribution:
    // subtract mean, then divide by standard deviation ("scale")
    float ScaledValue =
        (FeatureValue - Means[FeatureIndex]) / Scales[FeatureIndex];
    // Assuming the Buffer at index 0 is for feature input of shape:
    // (Feature.size())
    float *Location = getTensor<float>(0) + FeatureIndex;
    *Location = ScaledValue;
    return true;
  }

  // Outputs for this model are only int so we only need to override this
  // method
  int getModelResultI(std::string OutputName) override {
    if (OutputName == "FI-ShouldInline") {
      int Classes[] = {0, 1};
      void *ResultUntyped = CompiledModel->result_data(0);
      float *Result = reinterpret_cast<float *>(ResultUntyped);
      float Max = Result[0];
      int MaxClass = 0;
      for (size_t I = 0; I < sizeof(Classes) / sizeof(int); ++I) {
        if (Result[I] > Max) {
          Max = Result[I];
          MaxClass = I;
        }
      }

      return Classes[MaxClass];
    }
    assert(false && "ModelRunner received invalid result name");
  }
};

} // namespace llvm

#endif // LLVM_ANALYSIS_FIMODELRUNNER_H

#endif // LLVM_HAVE_TF_AOT_FICOMPILEDMODEL

#endif // ENABLE_ACPO
