//===-- Sw64Subtarget.h - Define Subtarget for the Sw64 -------*- C++ -*-===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Sw64 specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//
#ifndef LLVM_LIB_TARGET_SW64_SW64SUBTARGET_H
#define LLVM_LIB_TARGET_SW64_SW64SUBTARGET_H

#include "Sw64FrameLowering.h"
#include "Sw64ISelLowering.h"
#include "Sw64InstrInfo.h"
#include "Sw64SelectionDAGInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Support/CommandLine.h"
#include "llvm/Target/TargetMachine.h"
#include <string>
using namespace llvm;
extern cl::opt<bool> Sw64Mieee;
extern cl::opt<bool> Sw64DeleteNop;

extern cl::opt<bool> HasSIMD;

#define GET_SUBTARGETINFO_HEADER
#include "Sw64GenSubtargetInfo.inc"

namespace llvm {
class StringRef;

class Sw64Subtarget : public Sw64GenSubtargetInfo {
  virtual void anchor();

  enum Sw64ArchEnum { sw64 = 0, swTarch, core3b, core4 };

  bool isCore3b;
  bool isCore4;
  bool relax;
  bool Ev;

  bool Sw64OptMul;

  bool Sw64OptMemset;

  bool Sw64OptExt;

  bool Sw64EnableIntAri;
  bool Sw64EnableIntShift;
  bool Sw64EnableByteInst;
  bool Sw64EnableFloatAri;
  bool Sw64EnableFloatRound;
  bool Sw64EnableFloatCmov;
  bool Sw64EnablePostInc;
  bool Sw64EnableCasInst;
  bool Sw64EnableCrcInst;
  bool Sw64EnableSCbtInst;
  bool Sw64EnableWmembInst;
  bool Misaligned256StoreIsSlow = false;
  uint8_t MaxInterleaveFactor = 2;
  unsigned WideningBaseCost = 0;

  Sw64InstrInfo InstrInfo;
  // ReserveRegister[i] - #i is not available as a general purpose register.
  BitVector ReserveRegister;
  Sw64FrameLowering FrameLowering;
  Sw64TargetLowering TLInfo;
  Sw64SelectionDAGInfo TSInfo;

  bool HasCT;
  bool Is64Bit = true;

  Sw64ArchEnum Sw64ArchVersion;

public:
  mutable int curgpdist;
  // This constructor initializes the data members to match that
  // of the specified triple.
  Sw64Subtarget &initializeSubtargetDependencies(const Triple &TT,
                                                 StringRef CPU, StringRef FS);

  Sw64Subtarget(const Triple &TT, const std::string &CPU, const std::string &FS,
                const TargetMachine &TM);

  bool hasMieee() const { return Sw64Mieee; }
  bool hasDeleteNop() const { return Sw64DeleteNop; }

  int &getCurgpdist() const { return curgpdist; }
  void setCurgpdist(int &count) { curgpdist = count; }
  bool hasSIMD() const { return HasSIMD; }

  unsigned getMaxInterleaveFactor() const { return MaxInterleaveFactor; }
  unsigned getWideningBaseCost() const { return WideningBaseCost; }
  bool isMisaligned256StoreSlow() const { return Misaligned256StoreIsSlow; }

  // ParseSubtargetFeatures - Parses features string setting specified
  // subtarget options.  Definition of function is auto generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef TuneCPU, StringRef FS);

  const Sw64InstrInfo *getInstrInfo() const override { return &InstrInfo; }
  const Sw64FrameLowering *getFrameLowering() const override {
    return &FrameLowering;
  }
  const Sw64TargetLowering *getTargetLowering() const override {
    return &TLInfo;
  }
  const Sw64SelectionDAGInfo *getSelectionDAGInfo() const override {
    return &TSInfo;
  }

  const Sw64RegisterInfo *getRegisterInfo() const override {
    return &InstrInfo.getRegisterInfo();
  }

  AntiDepBreakMode getAntiDepBreakMode() const override {
    return TargetSubtargetInfo::ANTIDEP_CRITICAL;
  }

  // TODO: enable PostRAscheduler for test
  bool enablePostRAScheduler() const { return true; }

  bool enableMachineScheduler() const { return true; }

  bool is64Bit() const { return true; }
  bool hasCore3b() const { return Sw64ArchVersion == core3b; }
#ifdef SW64_DEFAULT_ARCH_CORE3
  bool hasCore4() const { return Sw64ArchVersion == core4; }
#else
  bool hasCore4() const { return true; }
#endif
  bool enRelax() const { return relax; }
  bool hasEv() const { return Ev; }
  bool hasCT() const { return HasCT; }
  bool isRegisterReserved(size_t i) const { return ReserveRegister[i]; }

  bool enOptMul() const { return Sw64OptMul; }

  bool enOptMemset() const { return Sw64OptMemset; }

  bool enOptExt() const { return Sw64OptExt; }

  bool enableIntAri() const { return Sw64EnableIntAri; }
  bool enableIntShift() const { return Sw64EnableIntShift; }
  bool enableByteInst() const { return Sw64EnableByteInst; }
  bool enableFloatAri() const { return Sw64EnableFloatAri; }
  bool enableFloatRound() const { return Sw64EnableFloatRound; }
  bool enableFloatCmov() const { return Sw64EnableFloatCmov; }
  bool enablePostInc() const { return Sw64EnablePostInc; }
  bool enableCasInst() const { return Sw64EnableCasInst; }
  bool enableCrcInst() const { return Sw64EnableCrcInst; }
  bool enableSCbtInst() const { return Sw64EnableSCbtInst; }
  bool enableWmembInst() const { return Sw64EnableWmembInst; }

  void overrideSchedPolicy(MachineSchedPolicy &Policy,
                           unsigned NumRegionInstrs) const;
};
} // namespace llvm
#endif
